{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state';\nvar DateContext = /*#__PURE__*/React.createContext();\nexport var DateProvider = function DateProvider(props) {\n  _s();\n\n  var _useState = useState(''),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  useEffect(function () {\n    var options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    var prnDt = new Date().toLocaleTimeString('en-us', options);\n  }, []);\n  console.log(prnDt);\n\n  var _prnDt$split = prnDt.split(' '),\n      _prnDt$split2 = _slicedToArray(_prnDt$split, 5),\n      dayOfWeek = _prnDt$split2[0],\n      month = _prnDt$split2[1],\n      day = _prnDt$split2[2],\n      year = _prnDt$split2[3],\n      time = _prnDt$split2[4];\n\n  console.log(day);\n  var dayIndex = daysOfWeek.findIndex(function (day) {\n    return day + ',' == dayOfWeek;\n  });\n  console.log(dayIndex);\n  return /*#__PURE__*/_jsxDEV(DateContext.Provider, {\n    value: {\n      date: date\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(DateProvider, \"EHDxiaxkSKMYIDPOBLM2vs0AotU=\");\n\n_c = DateProvider;\nexport default DateContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateProvider\");","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx"],"names":["React","useState","useEffect","useLocalStorageState","DateContext","createContext","DateProvider","props","date","setDate","options","weekday","year","month","day","hour","minute","second","hour12","prnDt","Date","toLocaleTimeString","console","log","split","dayOfWeek","time","dayIndex","daysOfWeek","findIndex","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA,IAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA;;AAAA,kBACTN,QAAQ,CAAC,EAAD,CADC;AAAA,MAC1BO,IAD0B;AAAA,MACpBC,OADoB;;AAGjCP,EAAAA,SAAS,CAAC,YAAI;AACV,QAAMQ,OAAO,GAAG;AAAGC,MAAAA,OAAO,EAAE,MAAZ;AAAoBC,MAAAA,IAAI,EAAE,SAA1B;AAAqCC,MAAAA,KAAK,EAAE,MAA5C;AAAoDC,MAAAA,GAAG,EAAE,SAAzD;AAAoEC,MAAAA,IAAI,EAAE,SAA1E;AAAqFC,MAAAA,MAAM,EAAE,SAA7F;AAAwGC,MAAAA,MAAM,EAAE,SAAhH;AAA2HC,MAAAA,MAAM,EAAE;AAAnI,KAAhB;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,CAA8B,OAA9B,EAAuCX,OAAvC,CAAd;AACH,GAHQ,EAGP,EAHO,CAAT;AAOAY,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AAViC,qBAWaA,KAAK,CAACK,KAAN,CAAY,GAAZ,CAXb;AAAA;AAAA,MAWzBC,SAXyB;AAAA,MAWdZ,KAXc;AAAA,MAWPC,GAXO;AAAA,MAWFF,IAXE;AAAA,MAWIc,IAXJ;;AAYjCJ,EAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AAEA,MAAMa,QAAQ,GAAGC,UAAU,CAACC,SAAX,CAAqB,UAAAf,GAAG;AAAA,WAAIA,GAAG,GAAG,GAAN,IAAaW,SAAjB;AAAA,GAAxB,CAAjB;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAIA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBnB,MAAAA,IAAI,EAAJA;AADyB,KAA7B;AAAA,cAGKD,KAAK,CAACuB;AAHX;AAAA;AAAA;AAAA;AAAA,WADJ;AAOH,CA3BM;;GAAMxB,Y;;KAAAA,Y;AA6Bb,eAAeF,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state'\n\nconst DateContext = React.createContext();\n\nexport const DateProvider = props => {\n    const [date, setDate] = useState('');\n\n    useEffect(()=>{\n        const options = {  weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };\n        const prnDt = new Date().toLocaleTimeString('en-us', options);\n    },[]);\n\n    \n\n    console.log(prnDt)\n    const [ dayOfWeek, month, day, year, time ] = prnDt.split(' ')\n    console.log(day)\n\n    const dayIndex = daysOfWeek.findIndex(day => day + ',' == dayOfWeek);\n\n    console.log(dayIndex)\n\n\n\n    return(\n        <DateContext.Provider value={{\n            date\n        }}>\n            {props.children}\n        </DateContext.Provider>\n    )\n}\n\nexport default DateContext;"]},"metadata":{},"sourceType":"module"}