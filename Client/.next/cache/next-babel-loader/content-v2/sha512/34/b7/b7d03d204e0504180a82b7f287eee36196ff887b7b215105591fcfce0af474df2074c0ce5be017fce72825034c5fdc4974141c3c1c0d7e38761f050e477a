{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Components/Stripe/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  _s();\n\n  var _useState = useState(false),\n      succeeded = _useState[0],\n      setSucceeded = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(''),\n      processing = _useState3[0],\n      setProcessing = _useState3[1];\n\n  var _useState4 = useState(true),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var _useState5 = useState(''),\n      clientSecret = _useState5[0],\n      setClientSecret = _useState5[1];\n\n  var stripe = useStripe();\n  var elements = useElements();\n  useEffect(function () {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"http://localhost:5000/api/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\"\n        }]\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  var cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Listen for changes in the CardElement\n              // and display any errors as the customer types their card details\n              setDisabled(event.empty);\n              setError(event.error ? event.error.message : \"\");\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ev.preventDefault();\n              setProcessing(true);\n              _context2.next = 4;\n              return stripe.confirmCardPayment(clientSecret, {\n                payment_method: {\n                  card: elements.getElement(CardElement)\n                }\n              });\n\n            case 4:\n              payload = _context2.sent;\n\n              if (payload.error) {\n                setError(\"Payment failed \".concat(payload.error.message));\n                setProcessing(false);\n              } else {\n                setError(null);\n                setProcessing(false);\n                setSucceeded(true);\n              }\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this) : \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://dashboard.stripe.com/test/payments\",\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Components/Stripe/CheckoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","confirmCardPayment","payment_method","card","getElement","payload"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,yBAJP;AAKA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAAA,kBACHL,QAAQ,CAAC,KAAD,CADL;AAAA,MAC9BM,SAD8B;AAAA,MACnBC,YADmB;;AAAA,mBAEXP,QAAQ,CAAC,IAAD,CAFG;AAAA,MAE9BQ,KAF8B;AAAA,MAEvBC,QAFuB;;AAAA,mBAGDT,QAAQ,CAAC,EAAD,CAHP;AAAA,MAG9BU,UAH8B;AAAA,MAGlBC,aAHkB;;AAAA,mBAILX,QAAQ,CAAC,IAAD,CAJH;AAAA,MAI9BY,QAJ8B;AAAA,MAIpBC,WAJoB;;AAAA,mBAKGb,QAAQ,CAAC,EAAD,CALX;AAAA,MAK9Bc,YAL8B;AAAA,MAKhBC,eALgB;;AAMrC,MAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,MAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACAH,EAAAA,SAAS,CAAC,YAAM;AACd;AACAiB,IAAAA,MAAM,CACHC,KADH,CACS,iDADT,EAC4D;AACxDC,MAAAA,MAAM,EAAE,MADgD;AAExDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+C;AAKxDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAD;AAAR,OAAf;AALkD,KAD5D,EAQGC,IARH,CAQQ,UAAAC,GAAG,EAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAVH,EAWGF,IAXH,CAWQ,UAAAG,IAAI,EAAI;AACZf,MAAAA,eAAe,CAACe,IAAI,CAAChB,YAAN,CAAf;AACD,KAbH;AAcD,GAhBQ,EAgBN,EAhBM,CAAT;AAiBA,MAAMiB,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,SADH;AAEJC,QAAAA,UAAU,EAAE,mBAFR;AAGJC,QAAAA,aAAa,EAAE,aAHX;AAIJC,QAAAA,QAAQ,EAAE,MAJN;AAKJ,yBAAiB;AACfH,UAAAA,KAAK,EAAE;AADQ;AALb,OADD;AAULI,MAAAA,OAAO,EAAE;AACPJ,QAAAA,KAAK,EAAE,SADA;AAEPK,QAAAA,SAAS,EAAE;AAFJ;AAVJ;AADS,GAAlB;;AAiBA,MAAMC,YAAY;AAAA,wEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AACnB;AACA;AACA5B,cAAAA,WAAW,CAAC4B,KAAK,CAACC,KAAP,CAAX;AACAjC,cAAAA,QAAQ,CAACgC,KAAK,CAACjC,KAAN,GAAciC,KAAK,CAACjC,KAAN,CAAYmC,OAA1B,GAAoC,EAArC,CAAR;;AAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZH,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAMA,MAAMI,YAAY;AAAA,yEAAG,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBA,cAAAA,EAAE,CAACC,cAAH;AACAnC,cAAAA,aAAa,CAAC,IAAD,CAAb;AAFmB;AAAA,qBAGGK,MAAM,CAAC+B,kBAAP,CAA0BjC,YAA1B,EAAwC;AAC5DkC,gBAAAA,cAAc,EAAE;AACdC,kBAAAA,IAAI,EAAEhC,QAAQ,CAACiC,UAAT,CAAoBhD,WAApB;AADQ;AAD4C,eAAxC,CAHH;;AAAA;AAGbiD,cAAAA,OAHa;;AAQnB,kBAAIA,OAAO,CAAC3C,KAAZ,EAAmB;AACjBC,gBAAAA,QAAQ,0BAAmB0C,OAAO,CAAC3C,KAAR,CAAcmC,OAAjC,EAAR;AACAhC,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD,eAHD,MAGO;AACLF,gBAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACAJ,gBAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZqC,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAiBA,sBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAEA,YAAlC;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,cAAhB;AAA+B,MAAA,OAAO,EAAEb,SAAxC;AAAmD,MAAA,QAAQ,EAAES;AAA7D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAE9B,UAAU,IAAIE,QAAd,IAA0BN,SADtC;AAEE,MAAA,EAAE,EAAC,QAFL;AAAA,6BAIE;AAAM,QAAA,EAAE,EAAC,aAAT;AAAA,kBACGI,UAAU,gBACT;AAAK,UAAA,SAAS,EAAC,SAAf;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADS,GAGT;AAJJ;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YAFF,EAeGF,KAAK,iBACJ;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,IAAI,EAAC,OAAjC;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAqBE;AAAG,MAAA,SAAS,EAAEF,SAAS,GAAG,gBAAH,GAAsB,uBAA7C;AAAA,2EAEE;AACE,QAAA,IAAI,8CADN;AAAA,mBAGG,GAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GAlGuBD,Y;UAMPF,S,EACEC,W;;;KAPKC,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"http://localhost:5000/api/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({items: [{ id: \"xl-tshirt\" }]})\n      })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n          {\" \"}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}