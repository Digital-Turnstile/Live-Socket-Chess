{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Input from '../Input';\nimport WorkingOut from '../../../public/images/authentication-working-out-undraw.svg';\nimport AuthService from '../../Services/AuthService';\nimport AuthContext from '../../Contexts/AuthContext';\nimport { AuthWrapper, AuthCard, AuthBackground, AuthButton, AuthTitle, AuthSubtitle } from './Authentication.elements';\nexport default function Authentication(_ref) {\n  var mode = _ref.mode;\n  //router\n  var router = useRouter();\n\n  var _useState = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }),\n      credentials = _useState[0],\n      setCredentials = _useState[1]; //auth context\n\n\n  var _useContext = useContext(AuthContext),\n      login = _useContext.login,\n      logout = _useContext.logout;\n\n  var handleClick = function handleClick(data, mode) {\n    if (mode === 'register') {\n      if (data.password === data.confirmPassword) {\n        if (data.email.match(/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/)) {\n          AuthService.register({\n            username: data.username,\n            password: data.password,\n            email: data.email,\n            plan: 'free'\n          }).then(function (data) {\n            data.success ? router.push('/plans') : null;\n          });\n        } else {\n          console.log('email is invalid');\n        }\n      } else {\n        console.log('password does not match');\n      }\n    }\n\n    if (mode === 'login') {\n      AuthService.login({\n        username: data.username,\n        password: data.password\n      }).then(function (data) {\n        login(data);\n        data.success ? router.push('/plans') : null;\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(AuthWrapper, {\n    children: [/*#__PURE__*/_jsxs(AuthCard, {\n      children: [mode === 'register' ? /*#__PURE__*/_jsxs(\"form\", {\n        children: [/*#__PURE__*/_jsx(AuthTitle, {\n          children: \"Please register\"\n        }), /*#__PURE__*/_jsx(AuthSubtitle, {\n          children: /*#__PURE__*/_jsxs(\"ul\", {\n            children: [/*#__PURE__*/_jsx(\"li\", {\n              children: \"8 character minimum\"\n            }), /*#__PURE__*/_jsx(\"li\", {\n              children: \"mix case\"\n            }), /*#__PURE__*/_jsx(\"li\", {\n              children: \"a number\"\n            }), /*#__PURE__*/_jsx(\"li\", {\n              children: \"a special character\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          label: \"enter username\",\n          value: credentials.username,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                username: val\n              });\n            });\n          }\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"email\",\n          label: \"enter email\",\n          value: credentials.email,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                email: val\n              });\n            });\n          }\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"enter password\",\n          value: credentials.password,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                password: val\n              });\n            });\n          }\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"confirm password\",\n          value: credentials.confirmPassword,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                confirmPassword: val\n              });\n            });\n          }\n        })]\n      }) : /*#__PURE__*/_jsxs(\"form\", {\n        children: [/*#__PURE__*/_jsx(AuthTitle, {\n          children: \"Welcome back\"\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          label: \"enter username\",\n          value: credentials.username,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                username: val\n              });\n            });\n          }\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"enter password\",\n          value: credentials.password,\n          onChange: function onChange(val) {\n            return setCredentials(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                password: val\n              });\n            });\n          }\n        })]\n      }), /*#__PURE__*/_jsx(AuthButton, {\n        onClick: function onClick() {\n          return handleClick(credentials, mode);\n        },\n        children: \"Submit\"\n      })]\n    }), /*#__PURE__*/_jsx(AuthBackground, {\n      backgroundImg: WorkingOut\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}