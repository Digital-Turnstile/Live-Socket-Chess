{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Components/Authentication/Authentication.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Input from '../Input';\nimport WorkingOut from '../../../public/images/authentication-working-out-undraw.svg';\nimport AuthService from '../../Services/AuthService';\nimport AuthContext from '../../Contexts/AuthContext';\nimport { AuthWrapper, AuthCard, AuthBackground, AuthButton, AuthTitle, AuthSubtitle } from './Authentication.elements';\nexport default function Authentication({\n  mode\n}) {\n  //router\n  const router = useRouter();\n  const {\n    0: credentials,\n    1: setCredentials\n  } = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }); //auth context\n\n  const {\n    token,\n    login,\n    logout\n  } = useContext(AuthContext);\n\n  const handleClick = (data, mode) => {\n    if (mode === 'register') {\n      if (data.password === data.confirmPassword) {\n        if (data.email.match(/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/)) {\n          AuthService.register({\n            username: data.username,\n            password: data.password,\n            email: data.email,\n            plan: 'free'\n          }).then(data => {\n            data.success ? router.push('/plans') : null;\n          });\n        } else {\n          console.log('email is invalid');\n        }\n      } else {\n        console.log('password does not match');\n      }\n    }\n\n    if (mode === 'login') {\n      AuthService.login({\n        username: data.username,\n        password: data.password\n      }).then(data => {\n        data.success ? console.log('ok') : null;\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(AuthCard, {\n      children: [mode === 'register' ? /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(AuthTitle, {\n          children: \"Please register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AuthSubtitle, {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"8 character minimum\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"mix case\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"a number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"a special character\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          label: \"enter username\",\n          value: credentials.username,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              username: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"email\",\n          label: \"enter email\",\n          value: credentials.email,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              email: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"enter password\",\n          value: credentials.password,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              password: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"confirm password\",\n          value: credentials.confirmPassword,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              confirmPassword: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(AuthTitle, {\n          children: \"Welcome back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          label: \"enter username\",\n          value: credentials.username,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              username: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"password\",\n          autoComplete: \"new-password\",\n          label: \"enter password\",\n          value: credentials.password,\n          onChange: val => setCredentials(prevState => {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              password: val\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AuthButton, {\n        onClick: () => handleClick(credentials, mode),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AuthBackground, {\n      backgroundImg: WorkingOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Components/Authentication/Authentication.jsx"],"names":["React","useState","useContext","useEffect","useRouter","Input","WorkingOut","AuthService","AuthContext","AuthWrapper","AuthCard","AuthBackground","AuthButton","AuthTitle","AuthSubtitle","Authentication","mode","router","credentials","setCredentials","username","email","password","confirmPassword","token","login","logout","handleClick","data","match","register","plan","then","success","push","console","log","val","prevState"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Input from '../Input'\nimport WorkingOut from '../../../public/images/authentication-working-out-undraw.svg'\nimport AuthService from '../../Services/AuthService';\nimport AuthContext from '../../Contexts/AuthContext'\n\nimport {\n    AuthWrapper,\n    AuthCard,\n    AuthBackground,\n    AuthButton,\n    AuthTitle,\n    AuthSubtitle\n} from './Authentication.elements'\n\n\n\nexport default function Authentication({ mode }) {\n    //router\n    const router = useRouter()\n    const [credentials, setCredentials] = useState({ username: '', email: '', password: '', confirmPassword: '' })\n    //auth context\n    const {token, login, logout} = useContext(AuthContext)\n\n    const handleClick = (data, mode) => {\n        if (mode === 'register') {\n            if (data.password === data.confirmPassword) {\n                if (data.email.match(/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/)) {\n                    AuthService.register({ username: data.username, password: data.password, email: data.email, plan: 'free' }).then(data => {\n                        data.success ? router.push('/plans') : null\n                    })\n                } else {\n                    console.log('email is invalid')\n                }\n            } else {\n                console.log('password does not match')\n            }\n        }\n        if (mode === 'login') {\n            AuthService.login({ username: data.username, password: data.password }).then(data => {\n                data.success ? console.log('ok') : null\n            })\n        }\n    }\n\n    return <AuthWrapper>\n        <AuthCard>\n            {mode === 'register' ?\n                <form>\n                    <AuthTitle>Please register</AuthTitle>\n                    <AuthSubtitle>\n                        <ul>\n                            <li>8 character minimum</li>\n                            <li>mix case</li>\n                            <li>a number</li>\n                            <li>a special character</li>\n                        </ul>\n                    </AuthSubtitle>\n                    <Input\n                        type=\"text\"\n                        label=\"enter username\"\n                        value={credentials.username}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, username: val } })}\n                    />\n                    <Input\n                        type=\"email\"\n                        label=\"enter email\"\n                        value={credentials.email}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, email: val } })}\n                    />\n                    <Input\n                        type=\"password\"\n                        autoComplete=\"new-password\"\n                        label=\"enter password\"\n                        value={credentials.password}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, password: val } })}\n                    />\n                    <Input\n                        type=\"password\"\n                        autoComplete=\"new-password\"\n                        label=\"confirm password\"\n                        value={credentials.confirmPassword}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, confirmPassword: val } })}\n                    />\n\n                </form>\n                :\n                <form>\n                    <AuthTitle>\n                        Welcome back\n                    </AuthTitle>\n                    <Input\n                        type=\"text\"\n                        label=\"enter username\"\n                        value={credentials.username}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, username: val } })}\n                    />\n                    <Input\n                        type=\"password\"\n                        autoComplete=\"new-password\"\n                        label=\"enter password\"\n                        value={credentials.password}\n                        onChange={val => setCredentials(prevState => { return { ...prevState, password: val } })}\n                    />\n                </form>\n            }\n\n            <AuthButton onClick={() => handleClick(credentials, mode)}>Submit</AuthButton>\n        </AuthCard>\n        <AuthBackground backgroundImg={WorkingOut} />\n    </AuthWrapper>\n}\n\n"]},"metadata":{},"sourceType":"module"}