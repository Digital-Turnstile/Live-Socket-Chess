{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state';\nconst DateContext = /*#__PURE__*/React.createContext();\nexport const DateProvider = props => {\n  const {\n    0: date,\n    1: setDate\n  } = useState({\n    day: '',\n    month: '',\n    dayOfWeek: '',\n    firstSunInMonth: '',\n    timeOfDay: '',\n    exactTime: '',\n    year: ''\n  });\n  useEffect(() => {\n    const options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    const prnDt = new Date().toLocaleTimeString('en-us', options);\n    const [dayOfWeek, month, day, year, exactTime] = prnDt.split(' ');\n    console.log(dayOfWeek + ' ' + month + ' ' + day + ' ' + year + ' ' + exactTime);\n    setDate(prnDt);\n  }, []);\n  /*   console.log(prnDt)\n    const [ dayOfWeek, month, day, year, time ] = prnDt.split(' ')\n    console.log(day)\n     const dayIndex = daysOfWeek.findIndex(day => day + ',' == dayOfWeek);\n     console.log(dayIndex)\n  */\n\n  return /*#__PURE__*/_jsxDEV(DateContext.Provider, {\n    value: {\n      date\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\nexport default DateContext;","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx"],"names":["React","useState","useEffect","useLocalStorageState","DateContext","createContext","DateProvider","props","date","setDate","day","month","dayOfWeek","firstSunInMonth","timeOfDay","exactTime","year","options","weekday","hour","minute","second","hour12","prnDt","Date","toLocaleTimeString","split","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC;AAACS,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,KAAK,EAAE,EAAjB;AAAqBC,IAAAA,SAAS,EAAE,EAAhC;AAAoCC,IAAAA,eAAe,EAAE,EAArD;AAAyDC,IAAAA,SAAS,EAAE,EAApE;AAAwEC,IAAAA,SAAS,EAAE,EAAnF;AAAuFC,IAAAA,IAAI,EAAE;AAA7F,GAAD,CAAhC;AAEAd,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMe,OAAO,GAAG;AAAGC,MAAAA,OAAO,EAAE,MAAZ;AAAoBF,MAAAA,IAAI,EAAE,SAA1B;AAAqCL,MAAAA,KAAK,EAAE,MAA5C;AAAoDD,MAAAA,GAAG,EAAE,SAAzD;AAAoES,MAAAA,IAAI,EAAE,SAA1E;AAAqFC,MAAAA,MAAM,EAAE,SAA7F;AAAwGC,MAAAA,MAAM,EAAE,SAAhH;AAA2HC,MAAAA,MAAM,EAAE;AAAnI,KAAhB;AACA,UAAMC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,CAA8B,OAA9B,EAAuCR,OAAvC,CAAd;AACA,UAAM,CAACL,SAAD,EAAYD,KAAZ,EAAmBD,GAAnB,EAAwBM,IAAxB,EAA8BD,SAA9B,IAA2CQ,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAjD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAS,GAAG,GAAZ,GAAkBD,KAAlB,GAA0B,GAA1B,GAAgCD,GAAhC,GAAsC,GAAtC,GAA4CM,IAA5C,GAAmD,GAAnD,GAAyDD,SAArE;AACAN,IAAAA,OAAO,CAACc,KAAD,CAAP;AACH,GANQ,EAMP,EANO,CAAT;AAUF;AACF;AACA;AACA;AACA;AACA;;AAKI,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBf,MAAAA;AADyB,KAA7B;AAAA,cAGKD,KAAK,CAACsB;AAHX;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA9BM;AAgCP,eAAezB,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state'\n\nconst DateContext = React.createContext();\n\nexport const DateProvider = props => {\n    const [date, setDate] = useState({day: '', month: '', dayOfWeek: '', firstSunInMonth: '', timeOfDay: '', exactTime: '', year: '' });\n\n    useEffect(()=>{\n        const options = {  weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };\n        const prnDt = new Date().toLocaleTimeString('en-us', options);\n        const [dayOfWeek, month, day, year, exactTime] = prnDt.split(' ');\n        console.log(dayOfWeek + ' ' + month + ' ' + day + ' ' + year + ' ' + exactTime)\n        setDate(prnDt);\n    },[]);\n\n    \n\n  /*   console.log(prnDt)\n    const [ dayOfWeek, month, day, year, time ] = prnDt.split(' ')\n    console.log(day)\n\n    const dayIndex = daysOfWeek.findIndex(day => day + ',' == dayOfWeek);\n\n    console.log(dayIndex)\n\n */\n\n    return(\n        <DateContext.Provider value={{\n            date\n        }}>\n            {props.children}\n        </DateContext.Provider>\n    )\n}\n\nexport default DateContext;"]},"metadata":{},"sourceType":"module"}