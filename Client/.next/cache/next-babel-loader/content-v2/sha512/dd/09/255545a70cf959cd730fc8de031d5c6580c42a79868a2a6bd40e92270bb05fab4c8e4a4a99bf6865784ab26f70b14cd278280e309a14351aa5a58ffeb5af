{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Components/Stripe/CheckoutForm.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport AuthContext from '../../Contexts/AuthContext';\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const {\n    0: succeeded,\n    1: setSucceeded\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: processing,\n    1: setProcessing\n  } = useState('');\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true);\n  const {\n    0: clientSecret,\n    1: setClientSecret\n  } = useState('');\n  const {\n    token\n  } = useContext(AuthContext);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"http://localhost:5000/api/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": 'Bearer ' + token\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\"\n        }]\n      })\n    }).then(res => {\n      console.log(res);\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this) : \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Components/Stripe/CheckoutForm.js"],"names":["React","useState","useEffect","useContext","AuthContext","CardElement","useStripe","useElements","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","token","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","console","log","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport AuthContext from '../../Contexts/AuthContext'\n\n\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const {token} = useContext(AuthContext);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"http://localhost:5000/api/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": 'Bearer ' + token\n        },\n        body: JSON.stringify({items: [{ id: \"xl-tshirt\" }]})\n      })\n      .then(res => {\n          console.log(res)\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n          {\" \"}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}"]},"metadata":{},"sourceType":"module"}