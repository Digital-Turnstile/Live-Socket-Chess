{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state';\nvar DateContext = /*#__PURE__*/React.createContext();\nexport var DateProvider = function DateProvider(props) {\n  _s();\n\n  var _useState = useState({\n    day: 0,\n    month: 0,\n    dayOfWeek: '',\n    firstSunInMonth: '',\n    timeOfDay: '',\n    exactTime: '',\n    year: 0,\n    daysInMonth: 0\n  }),\n      date = _useState[0],\n      setDate = _useState[1];\n\n  useEffect(function () {\n    var options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n    var prnDt = new Date().toLocaleTimeString('en-us', options);\n\n    try {\n      //Cannot use- replaceAll not supported by all browsers\n      //const [dayOfWeek, month, day, year, exactTime] = prnDt.replaceAll(',', '').split(' ');\n      //refactored for better browser support replaceAll(',','') ==> split(',').join()\n      var hour = exactTime.split('').splice(0, 2).join('');\n      var timeOfDay = 'Evening';\n      if (hour < 17) timeOfDay = 'Afternoon';\n      if (hour < 12) timeOfDay = 'Morning';\n      var daysInMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();\n      setDate({\n        day: day,\n        month: month,\n        dayOfWeek: dayOfWeek,\n        firstSunInMonth: '',\n        timeOfDay: timeOfDay,\n        exactTime: exactTime,\n        year: year,\n        daysInMonth: daysInMonth\n      });\n      console.log('e');\n    } catch (_unused) {\n      //need modal for users who cannot properly access data\n      console.log('date could not be found');\n    }\n  }, []);\n  /*   console.log(prnDt)\n    const [ dayOfWeek, month, day, year, time ] = prnDt.split(' ')\n    console.log(day)\n       const dayIndex = daysOfWeek.findIndex(day => day + ',' == dayOfWeek);\n       console.log(dayIndex)\n    */\n\n  return /*#__PURE__*/_jsxDEV(DateContext.Provider, {\n    value: {\n      date: date\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(DateProvider, \"rt4e6q3JtBPRr99TbbZXk6r5lsQ=\");\n\n_c = DateProvider;\nexport default DateContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateProvider\");","map":{"version":3,"sources":["/home/caesar/Projects/Workout-SaaS/Client/src/Contexts/DateContext.jsx"],"names":["React","useState","useEffect","useLocalStorageState","DateContext","createContext","DateProvider","props","day","month","dayOfWeek","firstSunInMonth","timeOfDay","exactTime","year","daysInMonth","date","setDate","options","weekday","hour","minute","second","hour12","prnDt","Date","toLocaleTimeString","split","splice","join","getFullYear","getMonth","getDate","console","log","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA,IAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA;;AAAA,kBACTN,QAAQ,CAAC;AAAEO,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,KAAK,EAAE,CAAjB;AAAoBC,IAAAA,SAAS,EAAE,EAA/B;AAAmCC,IAAAA,eAAe,EAAE,EAApD;AAAwDC,IAAAA,SAAS,EAAE,EAAnE;AAAuEC,IAAAA,SAAS,EAAE,EAAlF;AAAsFC,IAAAA,IAAI,EAAE,CAA5F;AAA+FC,IAAAA,WAAW,EAAE;AAA5G,GAAD,CADC;AAAA,MAC1BC,IAD0B;AAAA,MACpBC,OADoB;;AAGjCf,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMgB,OAAO,GAAG;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBL,MAAAA,IAAI,EAAE,SAAzB;AAAoCL,MAAAA,KAAK,EAAE,MAA3C;AAAmDD,MAAAA,GAAG,EAAE,SAAxD;AAAmEY,MAAAA,IAAI,EAAE,SAAzE;AAAoFC,MAAAA,MAAM,EAAE,SAA5F;AAAuGC,MAAAA,MAAM,EAAE,SAA/G;AAA0HC,MAAAA,MAAM,EAAE;AAAlI,KAAhB;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,CAA8B,OAA9B,EAAuCR,OAAvC,CAAd;;AAEA,QAAI;AACA;AACA;AACA;AACA,UAAME,IAAI,GAAGP,SAAS,CAACc,KAAV,CAAgB,EAAhB,EAAoBC,MAApB,CAA2B,CAA3B,EAA8B,CAA9B,EAAiCC,IAAjC,CAAsC,EAAtC,CAAb;AACA,UAAIjB,SAAS,GAAG,SAAhB;AACA,UAAIQ,IAAI,GAAG,EAAX,EACIR,SAAS,GAAG,WAAZ;AACJ,UAAIQ,IAAI,GAAG,EAAX,EACIR,SAAS,GAAG,SAAZ;AACJ,UAAMG,WAAW,GAAG,IAAIU,IAAJ,CAAU,IAAIA,IAAJ,EAAD,CAAWK,WAAX,EAAT,EAAoC,IAAIL,IAAJ,EAAD,CAAWM,QAAX,KAAwB,CAA3D,EAA8D,CAA9D,EAAiEC,OAAjE,EAApB;AAEAf,MAAAA,OAAO,CAAC;AAAET,QAAAA,GAAG,EAAEA,GAAP;AAAYC,QAAAA,KAAK,EAAEA,KAAnB;AAA0BC,QAAAA,SAAS,EAAEA,SAArC;AAAgDC,QAAAA,eAAe,EAAE,EAAjE;AAAqEC,QAAAA,SAAS,EAAEA,SAAhF;AAA2FC,QAAAA,SAAS,EAAEA,SAAtG;AAAiHC,QAAAA,IAAI,EAAEA,IAAvH;AAA6HC,QAAAA,WAAW,EAAEA;AAA1I,OAAD,CAAP;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACH,KAdD,CAcE,gBAAK;AACH;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;AACJ,GAtBQ,EAsBN,EAtBM,CAAT;AA0BA;AACJ;AACA;AACA;AACA;AACA;;AAKI,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBlB,MAAAA,IAAI,EAAJA;AADyB,KAA7B;AAAA,cAGKT,KAAK,CAAC4B;AAHX;AAAA;AAAA;AAAA;AAAA,WADJ;AAOH,CA9CM;;GAAM7B,Y;;KAAAA,Y;AAgDb,eAAeF,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useLocalStorageState from 'use-local-storage-state'\n\nconst DateContext = React.createContext();\n\nexport const DateProvider = props => {\n    const [date, setDate] = useState({ day: 0, month: 0, dayOfWeek: '', firstSunInMonth: '', timeOfDay: '', exactTime: '', year: 0, daysInMonth: 0 });\n\n    useEffect(() => {\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false };\n        const prnDt = new Date().toLocaleTimeString('en-us', options);\n\n        try {\n            //Cannot use- replaceAll not supported by all browsers\n            //const [dayOfWeek, month, day, year, exactTime] = prnDt.replaceAll(',', '').split(' ');\n            //refactored for better browser support replaceAll(',','') ==> split(',').join()\n            const hour = exactTime.split('').splice(0, 2).join('');\n            let timeOfDay = 'Evening';\n            if (hour < 17)\n                timeOfDay = 'Afternoon'\n            if (hour < 12)\n                timeOfDay = 'Morning'\n            const daysInMonth = new Date((new Date).getFullYear(), (new Date).getMonth() + 1, 0).getDate();\n\n            setDate({ day: day, month: month, dayOfWeek: dayOfWeek, firstSunInMonth: '', timeOfDay: timeOfDay, exactTime: exactTime, year: year, daysInMonth: daysInMonth });\n            console.log('e')\n        } catch{\n            //need modal for users who cannot properly access data\n            console.log('date could not be found')\n        }\n    }, []);\n\n\n\n    /*   console.log(prnDt)\n      const [ dayOfWeek, month, day, year, time ] = prnDt.split(' ')\n      console.log(day)\n  \n      const dayIndex = daysOfWeek.findIndex(day => day + ',' == dayOfWeek);\n  \n      console.log(dayIndex)\n  \n   */\n\n    return (\n        <DateContext.Provider value={{\n            date\n        }}>\n            {props.children}\n        </DateContext.Provider>\n    )\n}\n\nexport default DateContext;"]},"metadata":{},"sourceType":"module"}