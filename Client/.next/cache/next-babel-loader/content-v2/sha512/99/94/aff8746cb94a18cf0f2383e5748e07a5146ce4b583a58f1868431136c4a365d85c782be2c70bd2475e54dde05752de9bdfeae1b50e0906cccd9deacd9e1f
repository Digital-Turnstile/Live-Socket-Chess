{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Theme } from '../globalStyles';\nconst InputContainer = styled.div.withConfig({\n  displayName: \"Input__InputContainer\",\n  componentId: \"sc-93bttv-0\"\n})([\"display:flex;flex-direction:column;margin:15px 0;position:relative;margin-top:30px;& > input{border:1px solid \", \";border-radius:0.25rem;background-color:transparent;outline:none;padding:15px 3px 15px 15px;font-size:16px;transition:all 0.2s ease;z-index:500;color:#f1f1f1}& > label{color:#757575;position:absolute;top:15px;left:15px;transition:all 0.2s ease;z-index:500;\", \"}\"], Theme.purple, props => props.focused && `\n      color: #f1f1f1;\n      transform: translateY(-23px) translateX(-5px);\n      z-index: 501;\n      background: ${Theme.purple};\n      padding: 0 8px;\n      border-radius: 2px;\n    `);\n\nconst Input = (_ref) => {\n  let {\n    value,\n    type,\n    label,\n    onChange,\n    onFocus,\n    onBlur,\n    setRef,\n    id\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"value\", \"type\", \"label\", \"onChange\", \"onFocus\", \"onBlur\", \"setRef\", \"id\"]);\n\n  const [focused, setFocused] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  const handleOnFocus = () => {\n    setFocused(true);\n    onFocus();\n  };\n\n  const handleOnBlur = () => {\n    setFocused(false);\n    onBlur();\n  };\n\n  const validateValue = val => {\n    if (type === \"email\") {\n      if (val.indexOf(\"@\") === -1) {\n        setError(\"email is invalid\");\n      } else {\n        setError(null);\n      }\n    }\n  };\n\n  const handleOnChange = val => {\n    validateValue(val);\n    onChange(val);\n  };\n\n  const renderLabel = () => {\n    if (label) {\n      if (error) {\n        return /*#__PURE__*/_jsx(\"label\", {\n          children: error\n        });\n      }\n\n      return /*#__PURE__*/_jsx(\"label\", {\n        children: label\n      });\n    }\n\n    return null;\n  };\n\n  const isFocused = focused || String(value).length || type === \"date\";\n  return /*#__PURE__*/_jsxs(InputContainer, {\n    focused: isFocused,\n    error: error,\n    children: [renderLabel(), /*#__PURE__*/_jsx(\"input\", _objectSpread({\n      value: value,\n      type: type,\n      onChange: e => handleOnChange(e.target.value),\n      onFocus: handleOnFocus,\n      onBlur: handleOnBlur,\n      ref: ref => setRef(ref),\n      id: id\n    }, props))]\n  });\n};\n\nInput.defaultProps = {\n  type: \"text\",\n  label: \"\",\n  onChange: text => {\n    console.error(`Missing onChange prop: ${text}`);\n  },\n  onFocus: () => {},\n  onBlur: () => {},\n  setRef: () => {}\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}